{
	"info": {
		"_postman_id": "47d910f0-dd97-4d98-af23-4f7c13144061",
		"name": "AutoTestApi for Post",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14389797"
	},
	"item": [
		{
			"name": "GetPostList",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 700ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Check body data[0] is array\", function () {\r",
							"    pm.expect(jsonData.data).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Check body id is string\", function () {\r",
							"    pm.expect(jsonData.data[0].id).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Check body email is undefined\", function () {\r",
							"    pm.expect(jsonData.data[0].email).to.be.a('undefined');\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[19] id is string\", function () {\r",
							"    pm.expect(jsonData.data[19].id).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Check body data[20] id is undefined\", function () {\r",
							"    pm.expect(jsonData.data[20]).to.be.a('undefined');\r",
							"});\r",
							"\r",
							"pm.test(\"Check limit is 20\", function () {\r",
							"    pm.expect(jsonData.limit).to.eql(20);\r",
							"});\r",
							"\r",
							"pm.test(\"Check page is 0\", function () {\r",
							"    pm.expect(jsonData.page).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Check body total is number\", function () {\r",
							"    pm.expect(jsonData.total).to.be.a('number');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}post",
					"host": [
						"{{host}}post"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreatePost",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 700ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
							"});\r",
							"\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"pm.collectionVariables.set(\"postId\", jsonData.id);\r",
							"\r",
							"pm.test(\"Check body id is string\", function () {\r",
							"    pm.expect(jsonData.id).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Check body image\", function () {\r",
							"    pm.expect(jsonData.image).to.eql(\"https://www.softwaretestinghelp.com/wp-content/qa/uploads/2019/09/API-Testing-and-Web-Services.png\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body likes\", function () {\r",
							"    pm.expect(jsonData.likes).to.eql(100);\r",
							"});\r",
							"\r",
							"pm.test(\"Check body tags\", function () {\r",
							"    pm.expect(jsonData.tags).to.eql([\"API\", \"Test\", \"Autotest\"]);\r",
							"});\r",
							"\r",
							"pm.test(\"Check body text\", function () {\r",
							"    pm.expect(jsonData.text).to.eql(\"Слой API любого приложения - один из важнейших программных компонентов системы. Это канал, который соединяет клиента с сервером (или один микросервис с другим), управляет бизнес-процессами и представляет сервисы, которые  приносят пользу пользователям. Общедоступный API, ориентированный на клиента, который делают открытым для конечных пользователей, сам по себе становится продуктом. Если он сломается, это подвергнет риску не только одно приложение, но и целую цепочку бизнес-процессов, построенных вокруг него.\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body publishDate is string\", function () {\r",
							"    pm.expect('jsonData.publishDate').to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Check body updatedDate is string\", function () {\r",
							"    pm.expect('jsonData.updatedDate').to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Check body id\", function () {\r",
							"    pm.expect(jsonData.owner.id).to.eql(\"60d0fe4f5311236168a109ca\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body title\", function () {\r",
							"    pm.expect(jsonData.owner.title).to.eql(\"ms\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body firstName\", function () {\r",
							"    pm.expect(jsonData.owner.firstName).to.eql(\"Sara\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check body lastName\", function () {\r",
							"    pm.expect(jsonData.owner.lastName).to.eql(\"Andersen\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body picture\", function () {\r",
							"    pm.expect(jsonData.owner.picture).to.eql(\"https://randomuser.me/api/portraits/women/58.jpg\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"text\": \"Слой API любого приложения - один из важнейших программных компонентов системы. Это канал, который соединяет клиента с сервером (или один микросервис с другим), управляет бизнес-процессами и представляет сервисы, которые  приносят пользу пользователям. Общедоступный API, ориентированный на клиента, который делают открытым для конечных пользователей, сам по себе становится продуктом. Если он сломается, это подвергнет риску не только одно приложение, но и целую цепочку бизнес-процессов, построенных вокруг него.\",\r\n\"image\": \"https://www.softwaretestinghelp.com/wp-content/qa/uploads/2019/09/API-Testing-and-Web-Services.png\",\r\n\"likes\": 100,\r\n\"tags\": [\r\n    \"API\",\r\n    \"Test\",\r\n    \"Autotest\"\r\n],\r\n\"owner\": \"60d0fe4f5311236168a109ca\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}post/create",
					"host": [
						"{{host}}post"
					],
					"path": [
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetPostByID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 700ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Check body id is string\", function () {\r",
							"    pm.expect(jsonData.id).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Check body image\", function () {\r",
							"    pm.expect(jsonData.image).to.eql(\"https://www.softwaretestinghelp.com/wp-content/qa/uploads/2019/09/API-Testing-and-Web-Services.png\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body likes\", function () {\r",
							"    pm.expect(jsonData.likes).to.eql(100);\r",
							"});\r",
							"\r",
							"pm.test(\"Check body tags\", function () {\r",
							"    pm.expect(jsonData.tags).to.eql([\"API\", \"Test\", \"Autotest\"]);\r",
							"});\r",
							"\r",
							"pm.test(\"Check body text\", function () {\r",
							"    pm.expect(jsonData.text).to.eql(\"Слой API любого приложения - один из важнейших программных компонентов системы. Это канал, который соединяет клиента с сервером (или один микросервис с другим), управляет бизнес-процессами и представляет сервисы, которые  приносят пользу пользователям. Общедоступный API, ориентированный на клиента, который делают открытым для конечных пользователей, сам по себе становится продуктом. Если он сломается, это подвергнет риску не только одно приложение, но и целую цепочку бизнес-процессов, построенных вокруг него.\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body publishDate is string\", function () {\r",
							"    pm.expect('jsonData.publishDate').to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Check body updatedDate is string\", function () {\r",
							"    pm.expect('jsonData.updatedDate').to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Check body id\", function () {\r",
							"    pm.expect(jsonData.owner.id).to.eql(\"60d0fe4f5311236168a109ca\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body title\", function () {\r",
							"    pm.expect(jsonData.owner.title).to.eql(\"ms\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body firstName\", function () {\r",
							"    pm.expect(jsonData.owner.firstName).to.eql(\"Sara\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check body lastName\", function () {\r",
							"    pm.expect(jsonData.owner.lastName).to.eql(\"Andersen\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body picture\", function () {\r",
							"    pm.expect(jsonData.owner.picture).to.eql(\"https://randomuser.me/api/portraits/women/58.jpg\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}post/{{postId}}",
					"host": [
						"{{host}}post"
					],
					"path": [
						"{{postId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdatePost",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 700ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Check body id is string\", function () {\r",
							"    pm.expect(jsonData.id).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Check body image\", function () {\r",
							"    pm.expect(jsonData.image).to.eql(\"https://assets.website-files.com/5ff66329429d880392f6cba2/60bdda0e212247626479da02_use%20api.png\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body likes\", function () {\r",
							"    pm.expect(jsonData.likes).to.eql(9999);\r",
							"});\r",
							"\r",
							"pm.test(\"Check body tags\", function () {\r",
							"    pm.expect(jsonData.tags).to.eql([\"api-api\", \"TEST or test\", \"Autotest for API\"]);\r",
							"});\r",
							"\r",
							"pm.test(\"Check body text\", function () {\r",
							"    pm.expect(jsonData.text).to.eql(\"Стратегия тестирования - это высокоуровневое описание требований к тестированию, из которого впоследствии может быть составлен подробный план тестирования с указанием отдельных тестовых сценариев и тестовых случаев. Наша первая задача - это функциональное тестирование, чтобы убедиться, что API работает правильно.\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body publishDate is string\", function () {\r",
							"    pm.expect('jsonData.publishDate').to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Check body updatedDate is string\", function () {\r",
							"    pm.expect('jsonData.updatedDate').to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Check body id\", function () {\r",
							"    pm.expect(jsonData.owner.id).to.eql(\"60d0fe4f5311236168a109ca\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body title\", function () {\r",
							"    pm.expect(jsonData.owner.title).to.eql(\"ms\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body firstName\", function () {\r",
							"    pm.expect(jsonData.owner.firstName).to.eql(\"Sara\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check body lastName\", function () {\r",
							"    pm.expect(jsonData.owner.lastName).to.eql(\"Andersen\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check body picture\", function () {\r",
							"    pm.expect(jsonData.owner.picture).to.eql(\"https://randomuser.me/api/portraits/women/58.jpg\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"image\": \"https://assets.website-files.com/5ff66329429d880392f6cba2/60bdda0e212247626479da02_use%20api.png\",\r\n    \"likes\": 9999,\r\n    \"tags\": [\r\n        \"api-api\",\r\n        \"TEST or test\",\r\n        \"Autotest for API\"\r\n    ],\r\n    \"text\": \"Стратегия тестирования - это высокоуровневое описание требований к тестированию, из которого впоследствии может быть составлен подробный план тестирования с указанием отдельных тестовых сценариев и тестовых случаев. Наша первая задача - это функциональное тестирование, чтобы убедиться, что API работает правильно.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}post/{{postId}}",
					"host": [
						"{{host}}post"
					],
					"path": [
						"{{postId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeletePost",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 700ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(700);\r",
							"});\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"postId\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}post/{{postId}}",
					"host": [
						"{{host}}post"
					],
					"path": [
						"{{postId}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "app-id",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{app-id}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "postId",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		}
	]
}